image: Visual Studio 2017

# No need to run CI on the branch if we're also running CI for a PR.
skip_branch_with_pr: true

environment:
  
  matrix:
    # For Python versions available on Appveyor, see
    # http://www.appveyor.com/docs/installed-software#python
    # The list here is complete (excluding Python 2.6, which
    # isn't covered by this document) at the time of writing.

    - platform: x86
      PYTHON: "C:\\Python27"
      CMAKE_GENERATOR: "Visual Studio 9 2008"
    - platform: x64
      PYTHON: "C:\\Python27-x64"
      CMAKE_GENERATOR: "Visual Studio 9 2008 Win64"
    - platform: x86
      PYTHON: "C:\\Python34"
      CMAKE_GENERATOR: "Visual Studio 10 2010"
    - platform: x64
      PYTHON: "C:\\Python34-x64"
      CMAKE_GENERATOR: "Visual Studio 10 2010 Win64"
      DISTUTILS_USE_SDK: "1"
    - platform: x86
      PYTHON: "C:\\Python35"
      CMAKE_GENERATOR: "Visual Studio 14 2015"
    - platform: x64
      PYTHON: "C:\\Python35-x64"
      CMAKE_GENERATOR: "Visual Studio 14 2015 Win64"
    - platform: x86
      PYTHON: "C:\\Python36"
      CMAKE_GENERATOR: "Visual Studio 14 2015"
    - platform: x64
      PYTHON: "C:\\Python36-x64"
      CMAKE_GENERATOR: "Visual Studio 14 2015 Win64"
    - platform: x86
      PYTHON: "C:\\Python37"
      CMAKE_GENERATOR: "Visual Studio 14 2015"
    - platform: x64
      PYTHON: "C:\\Python37-x64"
      CMAKE_GENERATOR: "Visual Studio 14 2015 Win64"

init:
  # Note: We want to force the python version used so we must add the 
  # correct version earlier on the PATH so that CMake finds it when
  # configuring.
  - SET PATH=%PYTHON%;%PATH%
  
cache:
  ## Cache swig which we install via choco.
  # The syntax here is <dir-to-cache> -> <invalidated-when-this-file-changes>
  # If the appveyor.yml script is changed, then the cache is invalidated.
  # https://www.appveyor.com/docs/build-cache/
  - C:\ProgramData\chocolatey\bin -> appveyor.yml # swig.exe
  - C:\ProgramData\chocolatey\lib -> appveyor.yml # supporting swig Lib files.
  
install:
  # We need wheel installed to build wheels
  - "%PYTHON%\\python.exe -m pip install wheel"
  
  - cd C:\Tools\vcpkg
  - git pull --quiet
  - .\bootstrap-vcpkg.bat
  - cd %APPVEYOR_BUILD_FOLDER%  

  - git submodule update --init --recursive  

  ## Use Chocolatey to install SWIG.
  # Only install swig if it isn't present (as a result of AppVeyor's caching).
  # SWIG 3.0.8 is the minimum required version, but it does not yet exist in
  # Chocolatey.
  - IF NOT EXIST C:\ProgramData\chocolatey\bin\swig.exe choco install swig --version 3.0.9 --yes --limit-output #> $null

build_script:
  # This step builds your wheels.
  # Again, you only need build.cmd if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
  # interpreter
  - cd build
  - vcpkg install asio
  - vcpkg install catch2
  - cmake -G"%CMAKE_GENERATOR%" -DBOOST_LIBRARYDIR=C:\Libraries\boost_1_67_0\lib -DCMAKE_TOOLCHAIN_FILE=C:\Tools\vcpkg\scripts\buildsystems\vcpkg.cmake ..
  - msbuild ALL_BUILD.vcxproj /p:Configuration=Release
  - dir
  - dir ..\python\pc_ble_driver_py
  
  - cd %APPVEYOR_BUILD_FOLDER%
  - "build.cmd %PYTHON%\\python.exe setup.py bdist_wheel"

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: python\pc_ble_driver_py\dist\*
